# Global values
global:
  db: cassandra
  index: elasticsearch

# Related to the weaviate image
image:
  # registry where weaviate image is stored
  registry: docker.io/
  # tag of image to deploy
  tag: 0.17.1

importer: false

autoscaling:
  enabled: false
cpuTargetPercentage: 70
replicas: 1
replicasMax: 5
service:
  name: weaviate
  type: LoadBalancer

# Weaviate Config
authentication:
  anonymous_access:
    enabled: true
authorization:
  admin_list:
    enabled: false
contextionary:
  tag: en0.8.0-v0.3.0
query_defaults:
  limit: 100
debug: false
telemetry:
  disabled: true

vector_index:
  # if vector_index is enabled a separate esvector instance will be provisioned
  # alongside the other dependencies
  # it defaults to false in the current version, to enable a non-breaking
  # upgrade, but will be a standard-feature in the future
  enabled: false

# Sub Chart Overrides

#Cassandra
cassandra:
  fullnameOverride: cassandra
  deploy: true
  image:
    tag: 3
  config:
    cluster_size: 2
    seed_size: 2
    start_rpc: true
  resources:
    requests:
      memory: 4Gi
      cpu: 2
    limits:
      memory: 4Gi
      cpu: 2

#Elasticsearch
elasticsearch:
  deploy-so: true
  replicas: 3
  imageTag: '6.4.2'

#esvector
esvector:
  clusterName: 'esvector'
  image: semitechnologies/esvector
  imageTag: 7.1.0
  replicas: 3

#Janus
janusgraph:
  fullnameOverride: janusgraph
  image:
    repository: semitechnologies/janusgraph-docker
    tag: 0.3.1
  elasticsearch.deploy:
    deploy: false
  configMapOverrideName: janusgraph-config
  replicaCount: 1
  resources:
    requests:
      memory: 2Gi
      cpu: 1
    limits:
      memory: 2Gi
      cpu: 1
  persistence:
    enabled: false
  properties:
    storage.backend: cassandra
    storage.directory: /db/cassandra
    gremlin.graph: org.janusgraph.core.JanusGraphFactory
    index.search.elasticsearch.interface: REST_CLIENT
    index.search.backend: elasticsearch
    storage.index.search.local-mode: false
    storage.index.search.client-only: false

#Etcd
etcd:
  fullnameOverride: etcd
  envVarsConfigMap: 'etcd-config'
  statefulset:
    replicaCount: 3
  ##
  auth:
    rbac:
      enabled: false
    client:
      ## Switch to encrypt client communication using TLS certificates
      secureTransport: false
      ## Switch to automatically create the TLS certificates
      useAutoTLS: false
      enableAuthentication: false
    peer:
      ## Switch to encrypt client communication using TLS certificates
      secureTransport: true
      ## Switch to automatically create the TLS certificates
      useAutoTLS: true
      ## Switch to enable host authentication using TLS certificates. Requires existing secret.
      enableAuthentication: false
  metrics:
    enabled: true
    podAnnotations:
      prometheus.io/scrape: 'true'
    prometheus.io/port: '2379'
  disasterRecovery:
    # If you set `enabled: true` you need to make sure that an NFS provisioner
    # runs in your cluster! See
    # https://github.com/bitnami/charts/tree/master/bitnami/etcd#disaster-recovery
    # Defaults to 'false' so the chart works without an NFS provisioner.
    # However, 'enabled: true' is strongly recommended!
    enabled: false
    cronjob:
      schedule: '*/30 * * * *'
      historyLimit: 1
      podAnnotations: {}
    pvc:
      size: 2Gi
      storageClassName: nfs
  startFromSnapshot:
    enabled: false
    ## Existingn PVC containing the etcd snapshot
    ##
    # existingClaim
    ## Snapshot filename
    ##
    # snapshotFilename

# Spark
spark:
  deploy: false
  Spark:
    Path: '/spark'
  Master:
    Image: 'semitechnologies/spark-janusgraph-master'
    ImageTag: '1.6.3-janus-0.2.2'
    Replicas: 1
  Worker:
    Image: 'semitechnologies/spark-janusgraph-worker'
    ImageTag: '1.6.3-janus-0.2.2'
    Replicas: 3

# Spark Analytics Application
analytics:
  tag: latest
  configDir: /analytics
